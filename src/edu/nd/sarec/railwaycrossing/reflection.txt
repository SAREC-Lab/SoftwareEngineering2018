I ran out of time and wasn't able to implement everything unfortunately. Some design choices I would have made if I had the time would have been: give more information to the Car class, such as the road the car is currently on, the factory it came from (which I did in a very precarious fashion). I would also have made the gate aware of trains such that it could acknowledge to each train that it got an update. This way, the train would stop updating the gate after it left. Truly, the gate just needs to know when the train is approaching/close, and when it has crossed the left trigger point and has left.

2) This design is not very scalable. There is no notion in the roads about which cars are in them, which makes it hard to solve the problem of merging cars, and so would not scale to larger roadways.
I also don't think the state pattern is the best option to be used in the gate operation. Alternatively, some design pattern with a continuous thread that makes the gate check if there is a train approaching might be a better choice in my opinion. 
Third, the cars don't have much information at all about the roads, car factories, and other surrounding cars, just the one in front of it. It would be best to represent the cars in a way that would give them all the data they might need for safe navigation.
